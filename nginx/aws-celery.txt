# dec 19 2022
# this file goes over installation of celery with aws sqs on an ec2 instance. 
# we assume that the actions in aws-nginx.txt are done 

cd ~/barcode_identifier_api
source env_barcode/bin/activate 
sudo apt install libcurl4-openssl-dev libssl-dev
pip install celery[sqs]

sudo nano barcode_identifier_api/celery.py 
# in the file, when Celery() is called, specify the broker argument to be of format "sqs://" 
sudo nano barcode_identifier_api/settings.py 
# in this file, specify the variables of AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY based on the values from aws, and add various settings:
from kombu.utils.url import safequote
AWS_ACCESS_KEY_ID = safequote("AKIAU4MDS5KUZLZASN5T")
AWS_SECRET_ACCESS_KEY = safequote("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")
CELERY_BROKER_URL = f'sqs://{AWS_ACCESS_KEY_ID}:{AWS_SECRET_ACCESS_KEY}@'
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'region': 'us-east-2',
    'visibility_timeout': 1800,
    'polling_interval': 1,
    'wait_time_seconds': 10,
    'predefined_queues': {
        'BarcodeQueue.fifo': {
            'url': 'https://sqs.us-east-2.amazonaws.com/335820286633/BarcodeQueue.fifo',
            'access_key_id': "AKIAU4MDS5KUZLZASN5T",
            'secret_access_key': "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",
            'backoff_policy': {1: 10, 2: 15, 3: 20},
            'backoff_tasks': ['barcode_blastn.tasks.run_blast_command'],
        }
    }
}
CELERY_ROUTES = {
    'barcode_blastn.tasks.run_blast_command': 'BarcodeQueue.fifo'
}

# install blastn 
wget https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.12.0/ncbi-blast-2.12.0+-x64-linux.tar.gz
tar -xzvf ncbi-blast-2.12.0+-x64-linux.tar.gz
rm ncbi-blast-2.12.0+-x64-linux.tar.gz

# if you havent already done so, make the blastdb 
# FIRST, make a database.fasta file at ./4f33c746-e566-4cfb-a79d-1d4bcb8cae6d/database.fasta, and add fasta entries for every species in the database 
# then, run the tool to make the db 
ncbi-blast-2.12.0+/bin/makeblastdb -in fishdb/4f33c746-e566-4cfb-a79d-1d4bcb8cae6d/database.fasta -dbtype nucl -out fishdb/4f33c746-e566-4cfb-a79d-1d4bcb8cae6d/database -title database 



# run the worker and the server 
celery -A barcode_identifier_api worker --loglevel=INFO -Q BarcodeQueue.fifo 
uwsgi --ini barcode_identifier_api_uwsgi.ini

# example post from within Django API interface 
{
    "job_name": "testing sqs",
    "query_sequence": "CTGAGCCGGAATAGTTGGCACAGCCCTAAGCCTCCTCATCCGAGCAGAACTAAGTCAACCCGGGACCCTCCTTGGCGATGACCAAATTTATAACGTAATTGTTACTGCCCACGCCTTTGTAATAATCTTCTTTATAGTTATACCTATCATGATTGGCGGCTTTGGAAACTGACTTATCCCACTAATAATCGGAGCCCCAGATATAGCATTCCCCCGAATAAACAACATGAGCTTCTGACTTCTCCCGCCCTCTTTCCTGCTTCTCCTTGCCTCATCAGGAGTTGAGGCCGGGGCTGGAACAGGCTGAACCGTATACCCCCCTCTTGCAGGTAACCTTGCCCACGCAGGAGCCTCAGTAGACCTAACTATTTTCTCCCTACACCTTGCCGGAGTTTCCTCAATTCTCGGGGCTATTAATTTTATCACTACAATTATTAATATAAAACCCCCAGCTATCTCTCAGTATCAAACCCCTTTATTTATCTGGGCCCTGCTAGTAACCACCGTCCTCTTACTTCTTTCTCTTCCAGTCTTAGCTGCCGGTATTACCATACTACTAA"
}