# Generated by Django 4.1.3 on 2024-11-15 21:38

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlastDb',
            fields=[
                ('custom_name', models.CharField(help_text='Name of the database version', max_length=255)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of this database version of the library', primary_key=True, serialize=False)),
                ('genbank_version', models.SmallIntegerField(default=0, help_text='Version number reflective of changes in sequence data, accession.versions, and the set of accessions included.', validators=[django.core.validators.MaxValueValidator(32767), django.core.validators.MaxValueValidator(0)])),
                ('major_version', models.SmallIntegerField(default=0, help_text='Version number reflective of changes in important metadata such as source information, location, specimen identifiers.', validators=[django.core.validators.MaxValueValidator(32767), django.core.validators.MaxValueValidator(0)])),
                ('minor_version', models.SmallIntegerField(default=0, help_text='Version number reflective of minor changes such as database description, names, references.', validators=[django.core.validators.MaxValueValidator(32767), django.core.validators.MaxValueValidator(0)])),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Date and time at which database was created.')),
                ('modified', models.DateTimeField(auto_now=True, help_text='Date and time at which database was last modified.')),
                ('description', models.CharField(blank=True, default='', help_text='Description of this version', max_length=1024)),
                ('locked', models.BooleanField(default=False, help_text='Is editing of entry set (adding/removing) in the database locked?')),
                ('blacklisted_accessions', models.JSONField(default=list, help_text='List of accession numbers and versions blacklisted, which will not be added to the database.')),
            ],
            options={
                'verbose_name': 'BLAST Database Version',
                'verbose_name_plural': 'BLAST Database Versions',
                'ordering': ['genbank_version', 'major_version', 'minor_version'],
            },
        ),
        migrations.CreateModel(
            name='DatabaseShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission_level', models.CharField(choices=[('deny_access', 'Deny Access'), ('can_run_db', 'Can Run Db'), ('can_view_db', 'Can View Db'), ('can_edit_db', 'Can Edit Db')], default='deny_access', help_text='Access permissions', max_length=16)),
            ],
            options={
                'verbose_name': 'BLAST Database Access Permission',
                'verbose_name_plural': 'BLAST Database Access Permissions',
                'ordering': ['database__custom_name', 'grantee__username'],
            },
        ),
        migrations.CreateModel(
            name='TaxonomyNode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scientific_name', models.CharField(help_text='Scientific name.', max_length=512)),
                ('rank', models.CharField(choices=[('sk', 'Superkingdom'), ('k', 'Kingdom'), ('p', 'Phylum'), ('c', 'Class'), ('o', 'Order'), ('f', 'Family'), ('g', 'Genus'), ('s', 'Species')], help_text='Taxonomic rank', max_length=128)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'NCBI Taxonomy Node',
                'verbose_name_plural': 'NCBI Taxonomy Nodes',
                'ordering': ['scientific_name'],
            },
        ),
        migrations.CreateModel(
            name='NuccoreSequence',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of this sequence entry', primary_key=True, serialize=False)),
                ('accession_number', models.CharField(help_text='Accession number on GenBank', max_length=255)),
                ('version', models.CharField(help_text='The accession.version on GenBank', max_length=63)),
                ('uid', models.CharField(blank=True, default='', help_text='Obselete UUID', max_length=2048)),
                ('definition', models.CharField(blank=True, default='', help_text='The definition line', max_length=255)),
                ('organism', models.CharField(blank=True, default='', help_text='Scientific name of source organism', max_length=255)),
                ('organelle', models.CharField(blank=True, default='', help_text='Organelle of the source', max_length=255)),
                ('isolate', models.CharField(blank=True, default='', help_text='Isolate of the source specimen', max_length=255)),
                ('country', models.CharField(blank=True, default='', help_text='Origin country of the source specimen', max_length=255)),
                ('specimen_voucher', models.CharField(blank=True, default='', help_text='Specimen voucher of the source specimen', max_length=150)),
                ('dna_sequence', models.TextField(blank=True, default='', help_text='Sequence data', max_length=10000)),
                ('translation', models.TextField(blank=True, default='', help_text='Amino acid translation corresponding to the coding sequence', max_length=10000)),
                ('lat_lon', models.CharField(blank=True, default='', help_text='Latitude and longitude from which specimen originated', max_length=64)),
                ('type_material', models.CharField(blank=True, default='', help_text='Specimen type of the source', max_length=255)),
                ('taxid', models.IntegerField(blank=True, default=-2, help_text='Taxonomic identifier of source organism.')),
                ('keywords', models.CharField(blank=True, default='', help_text='Comma-separated list of keywords on the sequence record.', max_length=256)),
                ('title', models.CharField(blank=True, default='', help_text='Title of a publication by the authors of the sequence record.', max_length=512)),
                ('journal', models.CharField(blank=True, default='', help_text='The journal of a publication, expressed with the MEDLINE abbreviation.', max_length=512)),
                ('authors', models.CharField(blank=True, default='', help_text='Author list from the publication.', max_length=512)),
                ('taxonomy', models.CharField(blank=True, default='', help_text='Comma-separated list of taxonomic lineage from GenBank', max_length=512)),
                ('genbank_modification_date', models.DateField(help_text='Modification date of the GenBank entry, shown in the locus field of the flat file.')),
                ('collection_date', models.CharField(blank=True, default='', help_text='The date/time of or date/time range in which the specimen was collected.', max_length=128)),
                ('collected_by', models.CharField(blank=True, default='', help_text='Persons or institute that collected the specimen.', max_length=128)),
                ('identified_by', models.CharField(blank=True, default='', help_text='Name of expert who made the taxonomic identification of the species.', max_length=128)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Date and time at which record was first created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Date and time when sequence data was last updated from GenBank')),
                ('owner_database', models.ForeignKey(help_text='The curated database to which this sequence was added', on_delete=django.db.models.deletion.CASCADE, related_name='sequences', to='barcode_blastn.blastdb')),
                ('taxon_class', models.ForeignKey(help_text='Class of the source organism', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='class_member', related_query_name='class_members', to='barcode_blastn.taxonomynode')),
                ('taxon_family', models.ForeignKey(help_text='Family of the source organism', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='family_member', related_query_name='family_members', to='barcode_blastn.taxonomynode')),
                ('taxon_genus', models.ForeignKey(help_text='Genus of the source organism', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='genus_member', related_query_name='genus_members', to='barcode_blastn.taxonomynode')),
                ('taxon_kingdom', models.ForeignKey(help_text='Kingdom of the source organism', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='kingdom_member', related_query_name='kingdom_members', to='barcode_blastn.taxonomynode')),
                ('taxon_order', models.ForeignKey(help_text='Order of the source organism', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='order_member', related_query_name='order_members', to='barcode_blastn.taxonomynode')),
                ('taxon_phylum', models.ForeignKey(help_text='Phylum of the source organism', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='phylum_member', related_query_name='phylum_members', to='barcode_blastn.taxonomynode')),
                ('taxon_species', models.ForeignKey(help_text='Species taxa of the source organism', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='species_member', related_query_name='species_members', to='barcode_blastn.taxonomynode')),
                ('taxon_superkingdom', models.ForeignKey(help_text='Superkingdom of the source organism', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='superkingdom_member', related_query_name='superkingdom_members', to='barcode_blastn.taxonomynode')),
            ],
            options={
                'verbose_name': 'GenBank Accession',
                'verbose_name_plural': 'GenBank Accessions',
                'ordering': ['accession_number'],
            },
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('marker_gene', models.CharField(choices=[('CO1', 'CO1'), ('18S', '18S'), ('16S', '16S'), ('12S', '12S'), ('CytB', 'Cytb'), ('ITS', 'ITS')], max_length=8)),
                ('public', models.BooleanField(default=False, help_text='Is this reference library accessible to the public?')),
                ('description', models.CharField(blank=True, default='', help_text='Description of contents and usage', max_length=1024)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of this Reference Library', primary_key=True, serialize=False)),
                ('custom_name', models.CharField(help_text='Name of Reference Library', max_length=255, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Date and time at which reference library was first created')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('shares', models.ManyToManyField(related_name='permission', related_query_name='permissions', through='barcode_blastn.DatabaseShare', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reference Library',
                'verbose_name_plural': 'Reference Libraries',
                'ordering': ['custom_name'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalLibrary',
            fields=[
                ('marker_gene', models.CharField(choices=[('CO1', 'CO1'), ('18S', '18S'), ('16S', '16S'), ('12S', '12S'), ('CytB', 'Cytb'), ('ITS', 'ITS')], max_length=8)),
                ('public', models.BooleanField(default=False, help_text='Is this reference library accessible to the public?')),
                ('description', models.CharField(blank=True, default='', help_text='Description of contents and usage', max_length=1024)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier of this Reference Library')),
                ('custom_name', models.CharField(db_index=True, help_text='Name of Reference Library', max_length=255)),
                ('created', models.DateTimeField(blank=True, editable=False, help_text='Date and time at which reference library was first created')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Reference Library',
                'verbose_name_plural': 'historical Reference Libraries',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBlastDb',
            fields=[
                ('added', models.CharField(blank=True, default='None', max_length=10000)),
                ('deleted', models.CharField(blank=True, default='None', max_length=10000)),
                ('search_terms', models.CharField(blank=True, default='None', max_length=10000)),
                ('filter_options', models.CharField(blank=True, default='', max_length=10000)),
                ('custom_name', models.CharField(help_text='Name of the database version', max_length=255)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier of this database version of the library')),
                ('genbank_version', models.SmallIntegerField(default=0, help_text='Version number reflective of changes in sequence data, accession.versions, and the set of accessions included.', validators=[django.core.validators.MaxValueValidator(32767), django.core.validators.MaxValueValidator(0)])),
                ('major_version', models.SmallIntegerField(default=0, help_text='Version number reflective of changes in important metadata such as source information, location, specimen identifiers.', validators=[django.core.validators.MaxValueValidator(32767), django.core.validators.MaxValueValidator(0)])),
                ('minor_version', models.SmallIntegerField(default=0, help_text='Version number reflective of minor changes such as database description, names, references.', validators=[django.core.validators.MaxValueValidator(32767), django.core.validators.MaxValueValidator(0)])),
                ('created', models.DateTimeField(blank=True, editable=False, help_text='Date and time at which database was created.')),
                ('modified', models.DateTimeField(blank=True, editable=False, help_text='Date and time at which database was last modified.')),
                ('description', models.CharField(blank=True, default='', help_text='Description of this version', max_length=1024)),
                ('locked', models.BooleanField(default=False, help_text='Is editing of entry set (adding/removing) in the database locked?')),
                ('blacklisted_accessions', models.JSONField(default=list, help_text='List of accession numbers and versions blacklisted, which will not be added to the database.')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, db_constraint=False, help_text='The reference library which this database is a version of.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='barcode_blastn.library')),
            ],
            options={
                'verbose_name': 'historical BLAST Database Version',
                'verbose_name_plural': 'historical BLAST Database Versions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='databaseshare',
            name='database',
            field=models.ForeignKey(help_text='The database these permissions apply to.', on_delete=django.db.models.deletion.CASCADE, to='barcode_blastn.library'),
        ),
        migrations.AddField(
            model_name='databaseshare',
            name='grantee',
            field=models.ForeignKey(help_text='User that the permissions apply to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='BlastRun',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier of the run', primary_key=True, serialize=False)),
                ('job_name', models.CharField(blank=True, default='', help_text='A customizable name given by the submitter to refer to and describe this run.', max_length=255)),
                ('create_hit_tree', models.BooleanField(default=True, help_text='Perform alignment and construct "hit tree" of query sequences and hits?')),
                ('alignment_job_id', models.CharField(blank=True, default='', help_text='External job ID used to construct hit tree', max_length=100)),
                ('create_db_tree', models.BooleanField(default=True, help_text='Perform alignment and construct "database tree" of query sequences and all database sequences?')),
                ('complete_alignment_job_id', models.CharField(blank=True, default='', help_text='External job ID used to construct database tree', max_length=100)),
                ('hit_tree', models.TextField(blank=True, default='', help_text='Newick/phylip tree string of hit tree.')),
                ('db_tree', models.TextField(blank=True, default='', help_text='Newick/phylip tree string of database tree.')),
                ('status', models.CharField(choices=[('UNK', 'UNKNOWN'), ('DEN', 'DENIED'), ('QUE', 'QUEUED'), ('STA', 'RUNNING'), ('ERR', 'ERRORED'), ('FIN', 'FINISHED')], default='UNK', help_text='Current status of the job', max_length=3)),
                ('received_time', models.DateTimeField(auto_now_add=True, help_text='Date and time when run first received by server')),
                ('start_time', models.DateTimeField(blank=True, help_text='Date and time when job first started running', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='Date and time when job successfully finished running', null=True)),
                ('error_time', models.DateTimeField(blank=True, help_text='Date and time when job encountered an error', null=True)),
                ('blast_version', models.TextField(blank=True, default='', help_text='Version of BLASTn used', max_length=100)),
                ('errors', models.TextField(blank=True, default='', help_text='Error message text', max_length=10000)),
                ('db_used', models.ForeignKey(help_text='The curated BLAST database against which the query BLAST was run.', on_delete=django.db.models.deletion.CASCADE, related_name='usages', to='barcode_blastn.blastdb')),
            ],
            options={
                'verbose_name': 'BLASTN Run',
                'verbose_name_plural': 'BLASTN Runs',
                'ordering': ['-received_time'],
            },
        ),
        migrations.CreateModel(
            name='BlastQuerySequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('definition', models.CharField(help_text='Definition line', max_length=255)),
                ('query_sequence', models.CharField(help_text='Sequence text', max_length=50000)),
                ('results_species_name', models.CharField(default=None, help_text='Binomial species identity assigned from the best BLAST hits. If there are multiple best hits, this is a comma-delimited list.', max_length=512, null=True)),
                ('accuracy_category', models.CharField(choices=[('Correct ID', 'Correct Id'), ('Incorrect ID', 'Incorrect Id'), ('New ID', 'New Id'), ('Tentative Correct ID', 'Tentative Correct Id'), ('Incorrect ID without match', 'Incorrect Id No Match'), ('Unknown ID', 'Unknown Id'), ('Tentative additional species', 'Tenative Additional Species'), ('No hits', 'No Hits')], default=None, help_text='Category assigned after comparing sequence against reference libraries, using categories in Janzen et al. 2022.', max_length=32, null=True)),
                ('original_species_name', models.CharField(default=None, help_text='Original binomial species identity reported from the user query', max_length=255, null=True)),
                ('owner_run', models.ForeignKey(help_text='Job/run in which this query entry appeared', on_delete=django.db.models.deletion.CASCADE, related_name='queries', to='barcode_blastn.blastrun')),
            ],
            options={
                'verbose_name': 'BLASTN Query Sequence',
                'verbose_name_plural': 'BLASTN Query Sequences',
                'ordering': ['definition'],
                'unique_together': {('owner_run', 'definition')},
            },
        ),
        migrations.AddField(
            model_name='blastdb',
            name='library',
            field=models.ForeignKey(help_text='The reference library which this database is a version of.', on_delete=django.db.models.deletion.CASCADE, to='barcode_blastn.library'),
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Creation time of annotation')),
                ('annotation_type', models.CharField(choices=[('Misidentification', 'Misidentification'), ('Tentative New Species', 'Tentative New Species'), ('Unresolved Taxonomy', 'Unresolved Taxonomy'), ('Sequence Issue', 'Sequence Quality'), ('Contamination', 'Contamination'), ('Metadata Issue', 'Metadata Quality'), ('Validated Taxonomy', 'Validated Taxonomy'), ('Flag', 'Flag'), ('Keyword', 'Keyword'), ('Questions', 'Questions'), ('Other', 'Other')], help_text='Categorization of content within the annotation.', max_length=32)),
                ('comment', models.CharField(blank=True, default='', help_text='User-added comment text for annotation', max_length=512)),
                ('poster', models.ForeignKey(help_text='User which created of the annotation.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('sequence', models.ForeignKey(help_text='Sequence to which this annotation was made.', on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='barcode_blastn.nuccoresequence')),
            ],
        ),
        migrations.CreateModel(
            name='Hit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query_accession_version', models.CharField(help_text='Sequence identifier of query sequence', max_length=128)),
                ('subject_accession_version', models.CharField(help_text='Sequence identifier of sequence in database', max_length=128)),
                ('percent_identity', models.DecimalField(decimal_places=3, help_text='Percent identity', max_digits=6)),
                ('alignment_length', models.PositiveIntegerField(help_text='Alignment length')),
                ('mismatches', models.PositiveIntegerField(help_text='Number of mismatches')),
                ('gap_opens', models.PositiveIntegerField(help_text='Number of Gap openings')),
                ('query_start', models.PositiveIntegerField(help_text='Start of alignment in query')),
                ('query_end', models.PositiveIntegerField(help_text='End of alignment in query')),
                ('sequence_start', models.PositiveIntegerField(help_text='Start of alignment in subject')),
                ('sequence_end', models.PositiveIntegerField(help_text='End of alignment in subject')),
                ('evalue', models.DecimalField(decimal_places=100, help_text='Expect value', max_digits=110)),
                ('bit_score', models.DecimalField(decimal_places=100, help_text='Bit score', max_digits=110)),
                ('position', models.PositiveSmallIntegerField(help_text='Position of the hit within the results table. 1 = 1st (top) of the table.', validators=[django.core.validators.MinValueValidator(1)])),
                ('best_hit', models.BooleanField(default=False, help_text='Was this the best hit used for taxonomic assignment?')),
                ('db_entry', models.ForeignKey(help_text='BLAST database used in the run', on_delete=django.db.models.deletion.CASCADE, to='barcode_blastn.nuccoresequence')),
                ('query_sequence', models.ForeignKey(help_text='Query sequence to which this hit was registered.', on_delete=django.db.models.deletion.CASCADE, related_name='hits', to='barcode_blastn.blastquerysequence')),
            ],
            options={
                'verbose_name': 'BLASTN Run Hit',
                'verbose_name_plural': 'BLASTN Run Hits',
                'ordering': ['-percent_identity', 'db_entry__version'],
                'unique_together': {('query_sequence', 'position')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='databaseshare',
            unique_together={('database', 'grantee')},
        ),
    ]
